# test1.mnu
#
# use from Geany context:
#
# wish e_menu.tcl s=%s m=menus/test1.mnu
#
#% doctest
#% exec tclsh ~/TKE-clone/TKE-clone/plugins/e_menu/e_menu/e_menu.tcl \
#%      "m=menus/test1.mnu" t=1
#> doctest
#
#######################################################################

# options should go first because of "co=" (line continuator)

[OPTIONS]

co=;
o=0
n=< test1 >
w=45

[MENU]
 R: Doctest Safe: %e%x R: cd %d
 S: Doctest Safe: %e%x S: tclsh %m/src/doctest_of_emenu.tcl -v 0 %f

 R: Doctest Safe verbose: %e%x R: cd %d
 S: Doctest Safe verbose: %e%x S: tclsh %m/src/doctest_of_emenu.tcl -v 1 %f

 R: Doctest: %e%x R: cd %d
 S: Doctest: %e%x S: tclsh %m/src/doctest_of_emenu.tcl -s 0 -v 0 %f

 R: Doctest verbose: %e%x R: cd %d
 S: Doctest verbose: %e%x S: tclsh %m/src/doctest_of_emenu.tcl -s 0 -v 1 %f

 R: R: 4

 R: Run me (with %s) R: cd %d
 R: Run me (with %s) R: %IF "%x"==".htm" || "%x"==".html" %THEN %B %f
 R: Run me (with %s) R: %IF "%x"==".tcl" %THEN %T tclsh %f %s
 R: Run me (with %s) R: %IF "%x"==".py"  %THEN %t python3 %f %s
 R: Run me (with %s) R: ###########################################################
 R: Run me (with %s) R: %M "Edit this menu for file extention: %x"

 S: Shell script S: ? err=1; cd ~/FOSSIL; \n \
    # \n \
    # let it be while huh \n \
    # \n \
    while [ $err -eq 1 ];
      do repo=$(find *.fossil 2>/dev/null );
      err=$?;
      if [ $? -eq 1 ]; then \
        if [ $(pwd) = '/' ]; then \
          echo "repo non esistente" ;break;
        fi;
        cd ../;
      else \
        echo "$(pwd)/${repo}";
      fi;
    done

 S: Shell script-2 S: %#s err=1; cd ~/FOSSIL

 S: Input dialog S: cd %d
 R: Input dialog R: \
  %I "" "TEST OF %I" { \
  ent1  {{   Find: }} {"$::EN1"} \
  ent2  {{Replace: }} {"$::EN2"} \
  labo  {{} {-anchor w} {-t {\nOptions:} -font {-weight bold}}}  {} \
  radA  {{Match:   }} {"$::V1" {Exact} {Glob} {RE  }} \
  seh   {{} {} {}} {} \
  chb1  {{Match whole word only}} {$::C1} \
  chb2  {{Match case           }} {$::C2} \
  seh2  {{} {} {}} {} \
  v_    {{} {} {}} {} \
  cbx1  {{Where:   }} {"$::W1" {in file} {in session} {in directory}} \
  } -head "Enter data:" -weight bold == ::EN1 ::EN2 ::V1 ::C1 ::C2 ::W1
 S: Input dialog S: echo " ::EN1= '$::EN1' \n ::EN2= '$::EN2' \n ::V1 = $::V1 \
\n ::C1 = $::C1 \n ::C2 = $::C2\n ::W1 = $::W1\n --------------------------------------------"

 M:  M: 4

 MW: Test2 menu MW: "m=test2.mnu" o=0 "a1=if {![Q {DANGER!} {These commands are dangerous\nand can set the world on fire!\n\nContinue?} yesno]} exit"

 MW: Test3 menu MW: "m=test3.mnu" o=0

[OPTIONS]
::EN1=%s
::EN2=<replacing string>
::V1=Glob
::C1=1
::C2=1
::W1=in directory
pos=83.141
in=1.0
%#s geo=969x487+345+229;pos=5.0 # this script is run with %#s wildcard in test1.mnu|!|# it does the same as the previous "Shell script"|!||!|err=1|!|cd ~/FOSSIL|!|while [ $err -eq 1 ]|!|  do repo=$(find *.fossil 2>/dev/null )|!|  err=$?|!|  if [ $? -eq 1 ]; then|!|    if [ $(pwd) = '/' ]; then|!|      echo "repo non esistente" ; break|!|    fi|!|    cd ../|!|  else|!|    echo "$(pwd)/${repo}"|!|  fi|!|done

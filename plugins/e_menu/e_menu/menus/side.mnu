 ; side menu for e_menu.tcl

[OPTIONS]
in=17.0
o=0
pos=129.0
::EMENUTMPFILE=%mn.tmp~
%C if {![info exist ::EMENUCOMMIT]} {set ::EMENUCOMMIT [set ::EMENUCOMMIT2 ""]}
%C if {![info exist ::EMENUFILE]} {set ::EMENUFILE "%f"}
%C if {![info exist ::EMENUGREP]} {set ::EMENUGREP ""}
%C if {{%F}=={*} && ![info exist ::EMENUFILE]} {set ::EMENUFILE "*"}
%C set ::FILETAIL \"[file tail $::EMENUFILE]\"

[MENU]
 R:git status R: cd %PD
 S:git status S:pwd\necho %PD\ngit status

 R:git gui R: cd %PD
 R:git gui R: git gui

 R:gitk R: cd %PD
 R:gitk R: gitk

 R:  R: 2

 R:git difftool $::FILETAIL ? R: cd %PD
RW:git difftool $::FILETAIL ? RW: git log --format=oneline -10 > $::EMENUTMPFILE
 R:git difftool $::FILETAIL ? R: %I {} "DIFFTOOL" { \
   v_ {{} {-pady 4} {}} {} \
   fil1 {{   File:} {} {-w 70}} {"$::EMENUFILE"} \
   fco1 {{Version:} {} {-h 10 -state readonly -retpos 0:10 -inpval "$::EMENUCOMMIT"}} \
     {/@-pos 0 -len 10 $::EMENUTMPFILE/@    INFO: /@-div1 { } $::EMENUTMPFILE/@} \
   seh {{} {-pady 3} {}} {} \
   texc {{   Hint:} {} {-h 9 -w 70 -ro 1 -wrap word}} \
   {\n Select a version from the combobox to be compared to HEAD.\n\n If it's blank, the current file is compared to HEAD.\n\n No response means no differences.\n\n (temp file: $::EMENUTMPFILE)} \
   } -head {\n This will compare a selected version of\n     %f\n to its HEAD.} -weight bold == ::EMENUFILE ::EMENUCOMMIT
 R:git difftool $::FILETAIL ? R: git difftool $::EMENUCOMMIT HEAD -- "$::EMENUFILE"

 S:git diff ? S: cd %PD
RW:git diff ? RW: git log --format=oneline -10 > $::EMENUTMPFILE
 R:git diff ? R: %I {} "DIFF" { \
   v_ {{} {-pady 4} {}} {} \
   fco1 {{     Version :} {} {-h 10 -state readonly -retpos 0:10 -inpval "$::EMENUCOMMIT"}} \
     {/@-pos 0 -len 10 -list {""} $::EMENUTMPFILE/@    INFO: /@-div1 { } $::EMENUTMPFILE/@} \
   ent1 {{Regexp filter:} {} {-w 55}} {"$::EMENUGREP"} \
   seh {{} {-pady 3} {}} {} \
   texc {{        Hint :} {} {-h 9 -w 55 -ro 1 -wrap word}} \
   { Select a version from the combobox to be compared to HEAD. \
     \n\n If it's blank, the current files are compared to HEAD. \
     \n\n When 'regexp filter' set, an additional console shows \
     \n the filtered lines. \
     \n\n temp file:\n $::EMENUTMPFILE} \
   } -head {\n This will compare a selected version of \
     \n     %PD\n to its HEAD.} -weight bold == ::EMENUCOMMIT ::EMENUGREP
 S:git diff ? S: %C set ::EMENUTMP {git diff $::EMENUCOMMIT HEAD}
 R:git diff ? R: %IF {$::EMENUGREP} eq "" %THEN %T $::EMENUTMP
RW:git diff ? RW: $::EMENUTMP | grep -n "$::EMENUGREP" > "$::EMENUTMPFILE"
SW:git diff ? SW: cat "$::EMENUTMPFILE"
 R:git diff ? R: %C file delete "$::EMENUTMPFILE"
 S:git diff ? S: $::EMENUTMP

 R:  R: 2

 S:git add * S: cd %PD
 R:git add * R: %q "Adding changes" "Add all changes in\n\n%PD\n\nto a local repository ?"
 S:git add * S: git add *\ngit status

 S:git commit S: cd %PD
 R:git commit R: %q "Committing changes" "Commit with message to be edited ?"
 S:git commit S: git commit

 S:git commit --amend -am ? S: cd %PD
 S:git commit --amend -am ? S: %C if {![info exist ::EMENUCOMMIT3]} {set ::EMENUCOMMIT3 "%s %t1 #%i1"}
 R:git commit --amend -am ? R: %I {} "COMMIT AMEND" { \
   v_ {{} {-pady 4} {}} {} \
   texc {{Comment:} {} {-h 9 -w 70 -wrap word}} {$::EMENUCOMMIT3} \
   } -head {\n Enter the commenting text for the commit.} -weight bold == ::EMENUCOMMIT3
 R:git commit --amend -am ? R: %C if {"$::EMENUCOMMIT3" eq ""} exit
 S:git commit --amend -am ? S: git commit --amend -am "$::EMENUCOMMIT3"

 S:git commit -a S: cd %PD
 R:git commit -a R: %q "Add All and Commit Changes" " Add all changes\n and commit with message to be edited ?"
 S:git commit -a S: git commit -a

 R:  R: 2

 S:git log S: cd %PD
 S:git log S: git log


 S:git log -p "1 day ago" S: cd %PD
 S:git log -p "1 day ago" S: git log -p --since="1 day ago"

 R:  R: 2

 S:git pull S: cd %PD
 R:git pull R: %q "Pulling changes" "Pull changes in\n\na remote repository\n\nto %PD ?"
 S:git pull S: git pull

 S:git push S: cd %PD
 R:git push R: %q "Pushing changes" "Push all changes in\n\n%PD\n\nto a remote repository ?"
 S:git push S: git push

 R:  R: 2

 S:git merge S: cd %PD
 R:git merge R: %q "Merging changes" "Merge changes in\n\n  %PD ?"
 S:git merge S: git merge

 S:git branch S: cd %PD
 S:git branch S: git branch

 S:git checkout "%s" S: cd %PD
 R:git checkout "%s" R: %q "Checkout" "Checkout to\n\n'%s' ?"
 S:git checkout "%s" S: git checkout "%s"

 R: - R: 3

 MW:Fossil MW: m=fossil.mnu w=50
 MW:Git MW: #sets the menu item type = "M, MW, ME"
 MW:Git MW: m=git.mnu
 MW:Hg MW: m=hg.mnu

 R: - R: 3

 M:Find by grep M: m=grep.mnu w=40
 M:Tcl/Tk       M: m=tcltk.mnu w=20
 M:Utils        M: m=utils.mnu w=40

# utils menu for e_menu.tcl

 R: - R: 3
 R:Caja     %PD R: caja "%PD"
 R:Xterm    %PD R: cd %PD
 R:Xterm    %PD R: x-terminal-emulator -fa ru_RU.utf8 -fs 11 -geometry 80x40 R:Meld "%PD"        R:cd %PD
 R:Meld     %PD R:meld .
 R:edit all %PD R: cd %PD
 R:edit all %PD R: tke "%PD"
;
; I: Xterm in "%PD" (verbose) I: D run bash in %PD; cd "%PD"; S bash

 R: - R: 3
 ; wiki menu for e_menu.tcl
 R:Mail.ru R: chromium https://mail.ru
 R:Gmail R: %b https://gmail.com
 R:Google R: %b https://google.com
 R:Wikipedia.en R:%b https://en.wikipedia.org
 R:Wikipedia.de R:%b https://de.wikipedia.org
 R:Wikipedia.ru R:%b https://ru.wikipedia.org
 R:Project Gutenberg R: %b https://www.gutenberg.org/

 R: - R: 3
 R:Pave wiki R: %b https://aplsimple.github.io/en/tcl/pave
 R:Doctest wiki R: %b https://aplsimple.github.io/en/tcl/doctest
 R:E_menu wiki R: %b https://aplsimple.github.io/en/tcl/e_menu

[HIDDEN]
 R: 1. tkcon         R: tkcon
 R: 2. Stop working! R: ?-33*60/-7*60:ah=3? audacious  "/home/apl/PROGRAMS/C_COMM/breakon.wav"
 R: 3. Arbeiten!     R: audacious "/home/apl/PROGRAMS/C_COMM/breakoff.wav"
 R: 4. Edit          R: tke
RW: 5. APLinkee      RW: sleep 1
 R: 5. APLinkee      R: python3 /home/apl/PROGRAMS/run_APLinkee/run_APLinkee.py /media/windows/APLinkee.Shk/APLinkee.arli /media/apl/KINGSTON/APLinkee.Shk/APLinkee.arli 10
 R: 6. FVords        R: sleep 1
 R: 6. FVords        R: /home/apl/PROGRAMS/C_COMM/commw /media/apl/KINGSTON/FVords_Prepare fvords.exe

R: ------------------------------------ R:

 R:hg summary -- hg status R: cd %PD
 S:hg summary -- hg status S: echo %PD\nhg summary\necho ---------------\nhg status

 R:hg addremove * R: %q "ADD" "This will ADD & REMOVE all changes in:\n\n%PD"
 R:hg addremove * R: cd %PD
 S:hg addremove * S: hg addremove *\nhg status

SW:hg commit SW: hg status
 R:hg commit R: %q "Committing changes" "This will COMMIT with input message in:\n\n%PD"
 R:hg commit R: cd %PD
 S:hg commit S: hg commit

 R:hg commit --amend R: %q "COMMIT AMEND" "This will AMEND the last commit in\n\n%PD"
 R:hg commit --amend R: cd %PD
 S:hg commit --amend S: hg commit --amend

 R:hg diff R: cd %PD
 S:hg diff S: hg diff

 R:hg revert R: %q "REVERT" "This will REVERT ALL changes in\n\n%PD"
 R:hg revert R: cd %PD
 S:hg revert S: hg revert -a -C

 R:hg rollback R: %q "ROLLBACK" "This will ROLL BACK the last commit in\n\n%PD"
 R:hg rollback R: cd %PD
 S:hg rollback S: hg rollback

 R:hg incoming R: cd %PD
 S:hg incoming S: hg incoming

 R:hg fetch R: %q "FETCH" "This will PULL, MERGE and COMMIT changes into:\n\n%PD"
 R:hg fetch R: cd %PD
 S:hg fetch S: hg fetch

 R:hg outgoing R: cd %PD
 S:hg outgoing S: hg outgoing

 R:hg push R: %q "PUSH" "This will PUSH changes of:\n\n%PD"
 R:hg push R: cd %PD
 S:hg push S: hg push

 S:hg help S: %#t hg help

 R:edit ~/.hgrc R: %P %E $::env(HOME)/.hgrc
 R:edit .hgignore R: %E %PD/.hgignore

R: ------------------------------------ R:


 hg [OPTIONS]

%#t geo=919x553+0+56;pos=1.17 # hg help [topic]  - show help for a given topic or a help overview|!||!|hg help revert|!||!|############################################################################|!|# select topics from the list:|!||!|# add           add the specified files on the next commit|!|# addremove     add all new files, delete all missing files|!|# annotate      show changeset information by line for each file|!|# archive       create an unversioned archive of a repository revision|!|# backout       reverse effect of earlier changeset|!|# bisect        subdivision search of changesets|!|# bookmarks     create a new bookmark or list existing bookmarks|!|# branch        set or show the current branch name|!|# branches      list repository named branches|!|# bundle        create a changegroup file|!|# cat           output the current or given revision of files|!|# clone         make a copy of an existing repository|!|# commit        commit the specified files or all outstanding changes|!|# config        show combined config settings from all hgrc files|!|# copy          mark files as copied for the next commit|!|# diff          diff repository (or selected files)|!|# export        dump the header and diffs for one or more changesets|!|# files         list tracked files|!|# forget        forget the specified files on the next commit|!|# graft         copy changes from other branches onto the current branch|!|# grep          search revision history for a pattern in specified files|!|# heads         show branch heads|!|# help          show help for a given topic or a help overview|!|# identify      identify the working directory or specified revision|!|# import        import an ordered set of patches|!|# incoming      show new changesets found in source|!|# init          create a new repository in the given directory|!|# log           show revision history of entire repository or files|!|# manifest      output the current or given revision of the project manifest|!|# merge         merge another revision into working directory|!|# outgoing      show changesets not found in the destination|!|# paths         show aliases for remote repositories|!|# phase         set or show the current phase name|!|# pull          pull changes from the specified source|!|# push          push changes to the specified destination|!|# recover       roll back an interrupted transaction|!|# remove        remove the specified files on the next commit|!|# rename        rename files; equivalent of copy + remove|!|# resolve       redo merges or set/view the merge status of files|!|# revert        restore files to their checkout state|!|# root          print the root (top) of the current working directory|!|# serve         start stand-alone webserver|!|# status        show changed files in the working directory|!|# summary       summarize working directory state|!|# tag           add one or more tags for the current or given revision|!|# tags          list repository tags|!|# unbundle      apply one or more changegroup files|!|# update        update working directory (or switch revisions)|!|# verify        verify the integrity of the repository|!|# version       output version and copyright information|!||!|############################################################################
pos=5.0
in=16.0
yn=1

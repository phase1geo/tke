# TKE - Advanced Programmer's Editor
# Copyright (C) 2014-2016  Trevor Williams (phase1geo@gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

######################################################################
# Name:    snip_parser.tac
# Author:  Trevor Williams  (phase1geo@gmail.com)
# Date:    8/10/2015
# Brief:   Parser for snippet syntax.
######################################################################

source [file join $::tke_dir lib emmet_lexer.tcl]

set emmet_value  ""
set emmet_errmsg ""
set emmet_errstr ""
set emmet_pos    0

proc apply_multiplier {items multiplier} {

  # Get the last item of the list (the multiplier will be applied to it)
  set last_item [lindex $items end]

  # Make all of the items siblings of each other
  set last_item [join [lrepeat $multiplier [list $last_item]] " sibling "]

  # Add the new items to the end of the list
  set items [lreplace $items end end]
  lappend items {*}$last_item

  return $items

}


######
# Begin autogenerated taccle (version 1.1) routines.
# Although taccle itself is protected by the GNU Public License (GPL)
# all user-supplied functions are protected by their respective
# author's license.  See http://mini.net/tcl/taccle for other details.
######

proc EMMET_ABORT {} {
    return -code return 1
}

proc EMMET_ACCEPT {} {
    return -code return 0
}

proc emmet_clearin {} {
    upvar emmet_token t
    set t ""
}

proc emmet_error {s} {
    puts stderr $s
}

proc emmet_setupvalues {stack pointer numsyms} {
    upvar 1 1 y
    set y {}
    for {set i 1} {$i <= $numsyms} {incr i} {
        upvar 1 $i y
        set y [lindex $stack $pointer]
        incr pointer
    }
}

proc emmet_unsetupvalues {numsyms} {
    for {set i 1} {$i <= $numsyms} {incr i} {
        upvar 1 $i y
        unset y
    }
}

array set ::emmet_table {
  47:263 reduce
  27:262,target 2
  47:264 reduce
  50:260,target 18
  50:259,target 18
  49:260,target 17
  49:259,target 17
  11:263,target 12
  17:259 reduce
  17:260 reduce
  26:257,target 1
  17:261 reduce
  6:259,target 13
  6:260,target 13
  10:@ shift
  33:261,target 8
  40:264,target 7
  39:264,target 25
  48:0 reduce
  47:270 reduce
  47:269 reduce
  17:264 reduce
  38:260,target 26
  38:259,target 26
  26:257 shift
  6:259 reduce
  6:260 reduce
  6:261 reduce
  15:257,target 13
  17:270 reduce
  17:269 reduce
  0:275,target 9
  6:0,target 13
  6:263 reduce
  26:262 shift
  6:264 reduce
  24:- shift
  25:272,target 6
  26:266 shift
  11:261,target 12
  48:0,target 16
  47:270,target 15
  47:269,target 15
  17:264,target 4
  6:269 reduce
  6:270 reduce
  35:260 reduce
  35:259 reduce
  15:276,target 31
  35:261 reduce
  33:0,target 8
  16:259,target 3
  16:260,target 3
  26:272 shift
  17:0,target 4
  35:264 reduce
  10:0,target 24
  36:270,target 5
  36:269,target 5
  44:257 reduce
  26:275 goto
  13:267,target 21
  0:273,target 7
  8:264,target 21
  35:270 reduce
  35:269 reduce
  27:257,target 1
  18:266,target 3
  34:261,target 9
  14:257 reduce
  41:264,target 8
  44:267 reduce
  40:260,target 7
  40:259,target 7
  39:260,target 25
  39:259,target 25
  46:263,target 27
  3:257 shift
  30:264,target 14
  23:257 shift
  14:267 reduce
  26:272,target 6
  12:261,target 27
  48:270,target 16
  48:269,target 16
  17:0 reduce
  38:0 reduce
  17:260,target 4
  17:259,target 4
  32:260 reduce
  32:259 reduce
  46:261,target 27
  37:270,target 6
  37:269,target 6
  32:261 reduce
  14:267,target 22
  9:264,target 2
  32:264 reduce
  3:276 goto
  20:266,target 3
  19:266,target 3
  3:277 goto
  8:259,target 18
  8:260,target 19
  35:261,target 10
  42:264,target 9
  41:260 reduce
  41:259 reduce
  37:0,target 6
  41:261 reduce
  32:270 reduce
  32:269 reduce
  30:0,target 14
  18:262,target 2
  41:260,target 8
  41:259,target 8
  41:263 shift
  35:0 reduce
  47:263,target 15
  41:264 reduce
  11:259 reduce
  11:260 reduce
  2:275,target 9
  11:261 reduce
  50:260 reduce
  50:259 reduce
  49:260 reduce
  49:259 reduce
  11:263 reduce
  50:261 reduce
  49:261 reduce
  41:270 reduce
  41:269 reduce
  30:260,target 14
  30:259,target 14
  0:257 shift
  11:264 reduce
  27:272,target 6
  50:263 reduce
  49:263 reduce
  20:257 shift
  19:257 shift
  50:270,target 18
  50:269,target 18
  50:264 reduce
  49:270,target 17
  49:269,target 17
  49:264 reduce
  0:266,target 3
  9:0 reduce
  0:262 shift
  6:269,target 13
  6:270,target 13
  11:0 reduce
  11:269 reduce
  11:270 reduce
  20:262 shift
  19:262 shift
  32:0 reduce
  50:270 reduce
  50:269 reduce
  49:270 reduce
  49:269 reduce
  0:266 shift
  3:277,target 15
  47:261,target 15
  38:270,target 26
  38:269,target 26
  24:258,target 39
  20:266 shift
  19:266 shift
  8:259 shift
  8:260 shift
  15:267,target 30
  28:258 shift
  0:269 shift
  0:270 shift
  8:261 shift
  0:272 shift
  0:273 goto
  8:264 shift
  9:259,target 2
  9:260,target 2
  36:261,target 5
  20:272 shift
  19:272 shift
  0:274 goto
  43:264,target 10
  0:275 goto
  6:0 reduce
  20:262,target 2
  19:262,target 2
  20:275 goto
  19:275 goto
  42:260,target 9
  42:259,target 9
  8:269 shift
  8:270 shift
  48:263,target 16
  37:260 reduce
  37:259 reduce
  18:257,target 1
  7:0,target 0
  37:261 reduce
  16:269,target 3
  16:270,target 3
  32:264,target 7
  50:0 reduce
  49:0 reduce
  37:264 reduce
  50:0,target 18
  49:0,target 17
  46:260 reduce
  46:259 reduce
  34:0,target 9
  46:261 reduce
  37:270 reduce
  37:269 reduce
  39:-,target 46
  46:263 reduce
  0:262,target 2
  11:0,target 12
  46:264 reduce
  24:-,target 38
  16:259 reduce
  16:260 reduce
  48:261,target 16
  40:270,target 7
  40:269,target 7
  39:270,target 25
  39:269,target 25
  10:264,target 24
  16:261 reduce
  46:0 reduce
  46:270 reduce
  46:269 reduce
  5:257 shift
  16:264 reduce
  31:257,target 23
  25:257 shift
  37:261,target 6
  1:264,target 11
  16:269 reduce
  16:270 reduce
  25:262 shift
  43:260,target 10
  43:259,target 10
  50:263,target 18
  49:263,target 17
  20:257,target 1
  19:257,target 1
  17:270,target 4
  17:269,target 4
  6:263,target 13
  33:264,target 8
  25:266 shift
  34:260 reduce
  34:259 reduce
  34:261 reduce
  32:260,target 7
  32:259,target 7
  38:263,target 26
  25:272 shift
  34:264 reduce
  2:266,target 3
  8:269,target 22
  8:270,target 23
  25:275 goto
  43:260 reduce
  43:259 reduce
  18:272,target 6
  43:261 reduce
  34:270 reduce
  34:269 reduce
  25:275,target 40
  50:261,target 18
  49:261,target 17
  41:270,target 8
  41:269,target 8
  39:- shift
  0:257,target 1
  11:264,target 12
  43:263 shift
  6:261,target 13
  13:257 reduce
  43:264 reduce
  39:0 reduce
  10:259,target 24
  10:260,target 24
  46:0,target 27
  38:0,target 26
  38:261,target 26
  30:270,target 14
  30:269,target 14
  43:270 reduce
  43:269 reduce
  2:257 shift
  22:257 shift
  13:267 reduce
  1:260,target 11
  1:259,target 11
  2:262 shift
  13:268 shift
  34:264,target 9
  2:266 shift
  36:0 reduce
  33:260,target 8
  33:259,target 8
  40:263,target 47
  39:263,target 25
  31:257 reduce
  2:270 shift
  2:269 shift
  16:261,target 3
  1:278,target 11
  2:272 shift
  9:269,target 2
  9:270,target 2
  2:274 goto
  2:262,target 2
  13:268,target 29
  20:272,target 6
  19:272,target 6
  2:275 goto
  0:274,target 8
  44:257,target 20
  26:275,target 41
  42:270,target 9
  42:269,target 9
  12:264,target 28
  31:267 reduce
  40:260 reduce
  40:259 reduce
  39:260 reduce
  39:259 reduce
  40:261 reduce
  39:261 reduce
  11:259,target 12
  11:260,target 12
  33:0 reduce
  40:263 shift
  39:263 reduce
  40:264 reduce
  40:261,target 7
  39:264 reduce
  39:261,target 25
  46:264,target 27
  10:259 reduce
  10:260 reduce
  10:261 reduce
  8:0,target 1
  48:260 reduce
  48:259 reduce
  1:0,target 11
  10:263 reduce
  48:261 reduce
  40:270 reduce
  40:269 reduce
  39:270 reduce
  39:269 reduce
  22:257,target 36
  10:264 reduce
  0:272,target 6
  48:263 reduce
  35:264,target 10
  18:257 shift
  7:0 accept
  48:264 reduce
  34:260,target 9
  34:259,target 9
  10:269 reduce
  10:270 reduce
  41:263,target 48
  35:0,target 10
  30:0 reduce
  18:262 shift
  17:261,target 4
  10:@,target 24
  48:270 reduce
  48:269 reduce
  31:267,target 23
  27:257 shift
  18:266 shift
  30:263,target 14
  45:257,target 19
  27:275,target 42
  43:270,target 10
  43:269,target 10
  27:262 shift
  2:257,target 1
  28:258,target 43
  18:272 shift
  0:269,target 4
  0:270,target 5
  8:261,target 20
  12:259,target 25
  12:260,target 26
  27:266 shift
  18:275 goto
  25:266,target 3
  41:261,target 8
  36:260 reduce
  36:259 reduce
  32:270,target 7
  32:269,target 7
  47:264,target 15
  36:261 reduce
  47:0 reduce
  27:272 shift
  46:260,target 27
  46:259,target 27
  36:264 reduce
  23:257,target 37
  45:257 reduce
  30:261,target 14
  27:275 goto
  36:264,target 5
  1:0 reduce
  36:270 reduce
  36:269 reduce
  35:260,target 10
  35:259,target 10
  42:263,target 49
  15:257 shift
  10:269,target 24
  10:270,target 24
  45:267 reduce
  2:274,target 12
  4:257 shift
  3:257,target 13
  29:258,target 44
  24:258 shift
  1:270,target 11
  1:269,target 11
  9:261,target 2
  15:267 shift
  47:0,target 15
  39:0,target 25
  32:0,target 7
  26:266,target 3
  42:261,target 9
  33:270,target 8
  33:269,target 8
  16:0,target 3
  48:264,target 16
  25:262,target 2
  3:276,target 14
  15:276 goto
  47:260,target 15
  47:259,target 15
  33:260 reduce
  33:259 reduce
  33:261 reduce
  2:272,target 6
  37:264,target 6
  44:267,target 20
  33:264 reduce
  36:260,target 5
  36:259,target 5
  43:263,target 50
  13:257,target 21
  42:260 reduce
  42:259 reduce
  11:269,target 12
  11:270,target 12
  42:261 reduce
  33:270 reduce
  33:269 reduce
  16:0 reduce
  42:263 shift
  42:264 reduce
  37:0 reduce
  12:259 shift
  12:260 shift
  12:261 shift
  4:257,target 16
  2:270,target 5
  2:269,target 4
  42:270 reduce
  42:269 reduce
  12:264 shift
  1:265,target 10
  1:260 reduce
  1:259 reduce
  27:266,target 3
  21:258 shift
  18:275,target 32
  1:261 reduce
  43:261,target 10
  34:270,target 9
  34:269,target 9
  50:264,target 18
  49:264,target 17
  1:263 reduce
  9:0,target 2
  12:269 shift
  12:270 shift
  26:262,target 2
  1:264 reduce
  6:264,target 13
  1:265 shift
  48:260,target 16
  48:259,target 16
  34:0 reduce
  10:263,target 24
  25:257,target 1
  32:261,target 7
  9:259 reduce
  9:260 reduce
  38:264,target 26
  29:258 shift
  1:270 reduce
  1:269 reduce
  9:261 reduce
  45:267,target 19
  30:260 reduce
  30:259 reduce
  36:0,target 5
  30:261 reduce
  37:260,target 6
  37:259,target 6
  9:264 reduce
  30:263 reduce
  14:257,target 22
  30:264 reduce
  1:263,target 11
  12:269,target 22
  12:270,target 23
  8:0 reduce
  10:0 reduce
  1:278 goto
  9:269 reduce
  9:270 reduce
  38:260 reduce
  38:259 reduce
  38:261 reduce
  30:270 reduce
  30:269 reduce
  29:271 shift
  10:261,target 24
  46:270,target 27
  46:269,target 27
  38:263 reduce
  5:257,target 17
  16:264,target 3
  38:264 reduce
  29:271,target 45
  47:260 reduce
  47:259 reduce
  20:275,target 34
  19:275,target 33
  47:261 reduce
  38:270 reduce
  38:269 reduce
  35:270,target 10
  35:269,target 10
  21:258,target 35
  1:261,target 11
}

array set ::emmet_rules {
  27,l 278
  9,l 274
  11,l 275
  15,l 275
  20,l 276
  19,l 276
  2,l 274
  24,l 278
  6,l 274
  12,l 275
  16,l 275
  21,l 276
  3,l 274
  25,l 278
  7,l 274
  13,l 275
  0,l 279
  17,l 275
  22,l 277
  4,l 274
  26,l 278
  8,l 274
  10,l 274
  14,l 275
  18,l 275
  1,l 273
  23,l 277
  5,l 274
}

array set ::emmet_rules {
  23,dc 2
  5,dc 3
  0,dc 1
  17,dc 5
  12,dc 2
  26,dc 3
  8,dc 3
  21,dc 1
  3,dc 2
  15,dc 5
  10,dc 3
  24,dc 1
  6,dc 3
  18,dc 5
  1,dc 1
  13,dc 1
  27,dc 4
  9,dc 3
  22,dc 1
  4,dc 2
  16,dc 5
  11,dc 1
  25,dc 3
  7,dc 3
  20,dc 3
  19,dc 3
  2,dc 1
  14,dc 3
}

array set ::emmet_rules {
  13,line 99
  25,line 141
  7,line 79
  10,line 88
  22,line 130
  4,line 70
  18,line 114
  1,line 59
  15,line 105
  27,line 147
  9,line 85
  12,line 96
  24,line 138
  6,line 76
  21,line 125
  3,line 67
  17,line 111
  14,line 102
  26,line 144
  8,line 82
  11,line 93
  23,line 133
  5,line 73
  20,line 122
  19,line 119
  2,line 64
  16,line 108
}

proc emmet_parse {} {
    set emmet_state_stack {0}
    set emmet_value_stack {{}}
    set emmet_token ""
    set emmet_accepted 0
    while {$emmet_accepted == 0} {
        set emmet_state [lindex $emmet_state_stack end]
        if {$emmet_token == ""} {
            set ::emmet_lval ""
            set emmet_token [emmet_lex]
            set emmet_buflval $::emmet_lval
        }
        if {![info exists ::emmet_table($emmet_state:$emmet_token)]} {
            # pop off states until error token accepted
            while {[llength $emmet_state_stack] > 0 && \
                       ![info exists ::emmet_table($emmet_state:error)]} {
                set emmet_state_stack [lrange $emmet_state_stack 0 end-1]
                set emmet_value_stack [lrange $emmet_value_stack 0 \
                                       [expr {[llength $emmet_state_stack] - 1}]]
                set emmet_state [lindex $emmet_state_stack end]
            }
            if {[llength $emmet_state_stack] == 0} {
                emmet_error "parse error"
                return 1
            }
            lappend emmet_state_stack [set emmet_state $::emmet_table($emmet_state:error,target)]
            lappend emmet_value_stack {}
            # consume tokens until it finds an acceptable one
            while {![info exists ::emmet_table($emmet_state:$emmet_token)]} {
                if {$emmet_token == 0} {
                    emmet_error "end of file while recovering from error"
                    return 1
                }
                set ::emmet_lval {}
                set emmet_token [emmet_lex]
                set emmet_buflval $::emmet_lval
            }
            continue
        }
        switch -- $::emmet_table($emmet_state:$emmet_token) {
            shift {
                lappend emmet_state_stack $::emmet_table($emmet_state:$emmet_token,target)
                lappend emmet_value_stack $emmet_buflval
                set emmet_token ""
            }
            reduce {
                set emmet_rule $::emmet_table($emmet_state:$emmet_token,target)
                set emmet_l $::emmet_rules($emmet_rule,l)
                if {[info exists ::emmet_rules($emmet_rule,e)]} {
                    set emmet_dc $::emmet_rules($emmet_rule,e)
                } else {
                    set emmet_dc $::emmet_rules($emmet_rule,dc)
                }
                set emmet_stackpointer [expr {[llength $emmet_state_stack]-$emmet_dc}]
                emmet_setupvalues $emmet_value_stack $emmet_stackpointer $emmet_dc
                set _ $1
                set ::emmet_lval [lindex $emmet_value_stack end]
                switch -- $emmet_rule {
                    1 { 
        set ::emmet_value $1
       }
                    2 { 
              set _ [list $1]
             }
                    3 { 
              set _ [list id $2]
             }
                    4 { 
              set _ [list class $2]
             }
                    5 { 
              set _ [concat $1 [list id $3]]
             }
                    6 { 
              set _ [concat $1 [list class $]]
             }
                    7 { 
              set _ [concat $1 [list child $3]]
             }
                    8 { 
              set _ [concat $1 [list sibling $3]]
             }
                    9 { 
              set _ [concat $1 [list climb $3]]
             }
                    10 { 
              set _ [apply_multiplier $1 $3]
             }
                    11 { 
        set _ [list ident $1]
       }
                    12 { 
        set _ [list ident $1 $2]
       }
                    13 { 
        set _ [list text $1]
       }
                    14 { 
        set _ [list attrs $2]
       }
                    15 { 
        set _ [concat $2 [list child $4]]
       }
                    16 { 
        set _ [concat $2 [list sibling $4]]
       }
                    17 { 
        set _ [concat $2 [list climb $4]]
       }
                    18 { 
        set _ [list [apply_multiplier $2 $4]]
       }
                    19 { 
        set _ [list $1 "=\"$3\""]
       }
                    20 { 
        set _ [list $1 "=\"$3\""]
       }
                    21 { 
        set _ [list $1]
       }
                    22 { 
         set _ [list $1]
        }
                    23 { 
         set _ [list $1 $2]
        }
                    24 { 
             set _ [list $1 1 1]
            }
                    25 { 
             set _ [list $1 $3 1]
            }
                    26 { 
             set _ [list $1 1 -1]
            }
                    27 { 
             set _ [list $1 $3 -1]
            }
                }
                emmet_unsetupvalues $emmet_dc
                # pop off tokens from the stack if normal rule
                if {![info exists ::emmet_rules($emmet_rule,e)]} {
                    incr emmet_stackpointer -1
                    set emmet_state_stack [lrange $emmet_state_stack 0 $emmet_stackpointer]
                    set emmet_value_stack [lrange $emmet_value_stack 0 $emmet_stackpointer]
                }
                # now do the goto transition
                lappend emmet_state_stack $::emmet_table([lindex $emmet_state_stack end]:$emmet_l,target)
                lappend emmet_value_stack $_
            }
            accept {
                set emmet_accepted 1
            }
            goto -
            default {
                puts stderr "Internal parser error: illegal command $::emmet_table($emmet_state:$emmet_token)"
                return 2
            }
        }
    }
    return 0
}

######
# end autogenerated taccle functions
######

rename emmet_error emmet_error_orig

proc emmet_error {s} {

  set ::emmet_errstr "[string repeat { } $::emmet_begpos]^"
  set ::emmet_errmsg $s

}

proc parse_emmet {str} {

  # Flush the parsing buffer
  EMMET__FLUSH_BUFFER

  # Insert the string to scan
  emmet__scan_string $str

  # Initialize some values
  set ::emmet_begpos 0
  set ::emmet_endpos 0

  # Parse the string
  if {[catch { emmet_parse } rc] || ($rc != 0)} {
    puts "ERROR: "
    puts $str
    puts $::emmet_errstr
    puts $::emmet_errmsg
    puts "rc: $rc"
    return ""
  }

  return $::emmet_value

}

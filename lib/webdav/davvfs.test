#! /usr/bin/env tclkit

# davvfs.test:  tests for the vfs::dav package

if {1} {
  lappend auto_path ..
}

# -------------------------------------------------------------------------
# Initialize the test package
#
if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

# -------------------------------------------------------------------------
# Ensure we test _this_ local copy and not one installed somewhere else.
#
package forget vfs::dav
catch {namespace delete ::vfs::dav}
if {[catch {source [file join [file dirname [info script]] davvfs.tcl]} msg]} {
    puts "skipped [file tail [info script]]: $msg"
    return
}

# -------------------------------------------------------------------------
# Setup any constraints
#

# -------------------------------------------------------------------------
# Now the package specific tests....
# -------------------------------------------------------------------------

puts "- vfs::dav [package present vfs::dav]"

# -------------------------------------------------------------------------

test davvfs-1.0 {mount requires args} {
    catch {vfs::dav::Mount} msg
} {1}

test davvfs-1.1 {open connection} {
    vfs::dav::Mount http://hushie/testdav/ mydav
} {http://hushie/testdav/}

test davvfs-1.2 {glob root} {
    glob -directory mydav -tails *
} {a b d e f}

test davvfs-1.3 {getlist subdir} {
    glob -directory mydav/d -tails *
} {c}

test davvfs-1.4 {getstat file} {
    file stat mydav/a sb
    array get sb
} {mtime 1099562588 atime 0 gid -1 nlink 1 mode 33279 type file ctime 1099562605 uid -1 ino 0 size 29 dev -1}

test davvfs-1.5 {getstat subdir} {
    file stat mydav/d sb
    array get sb
} {mtime 1100511288 atime 0 gid -1 nlink 1 mode 16895 type directory ctime 1100511296 uid -1 ino 0 size 0 dev -1}

test davvfs-1.6 {getstat root} -body {
    file stat mydav/d sb
    array get sb ;# ctime & mtime change each time
} -match glob -result {mtime * atime 0 gid -1 nlink 1 mode 16895 type directory ctime * uid -1 ino 0 size 0 dev -1}

test davvfs-1.7 {get file contents} {
    set fd [open mydav/d/c]
    set r [read $fd]
    close $fd
    set r
} "Mon Nov 15 10:34:48 CET 2004\n"

test davvfs-2.1 {create directory} {
    file mkdir mydav/y
} {}

test davvfs-2.2 {create directory again} {
    file mkdir mydav/y
} {}

test davvfs-2.3 {getlist new subdir} {
    glob -nocomplain -directory mydav/y -tails *
} {}

test davvfs-2.4 {copy file} {
    file copy mydav/d/c mydav/y/c
} {29}

test davvfs-2.5 {get copied file contents} {
    set fd [open mydav/y/c]
    set r [read $fd]
    close $fd
    set r
} "Mon Nov 15 10:34:48 CET 2004\n"

test davvfs-2.6 {copy over file} {
    file copy -force mydav/b mydav/y/c
} {29}

test davvfs-2.7 {get new copied file contents} {
    set fd [open mydav/y/c]
    set r [read $fd]
    close $fd
    set r
} "Thu Nov  4 13:24:28 CET 2004\n"

test davvfs-3.1 {put new file} {
    set fd [open mydav/y/x w]
    puts -nonewline $fd blahblahblah
    close $fd
} {}

test davvfs-3.2 {getstat new file} -body {
    file stat mydav/y/x sb
    array get sb ;# ctime & mtime change each time
} -match glob -result {mtime * atime 0 gid -1 nlink 1 mode 33279 type file ctime * uid -1 ino 0 size 12 dev -1}

test davvfs-3.3 {get new put file contents} {
    set fd [open mydav/y/x]
    set r [read $fd]
    close $fd
    set r
} {blahblahblah}

test davvfs-3.4 {put over existing file} {
    set fd [open mydav/y/x w]
    puts -nonewline $fd woohoo
    close $fd
} {}

test davvfs-3.5 {get new put file contents} {
    set fd [open mydav/y/x]
    set r [read $fd]
    close $fd
    set r
} {woohoo}

test davvfs-4.1 {delete subdir} {
    file delete -force mydav/y
} {}

test davvfs-5.1 {getlist bad directory} {
    glob -nocomplain -directory mydav/y/y/y *
} {}

test davvfs-5.2 {create nested directory} {
    file mkdir mydav/n/n/n
    file delete -force mydav/n
} {}

test davvfs-5.3 {create bad file} -body {
    open mydav/o/o/o w
} -returnCodes 1 -result {o/o/o: Forbidden}

test davvfs-5.4 {get bad file} -body {
    open mydav/p/p/p
} -returnCodes 1 -result {p/p/p: Not Found}

test davvfs-5.5 {getstat bad file} -body {
    file stat mydav/q/q/q sb
} -returnCodes 1 -result {could not read "mydav/q/q/q": no such file or directory}

test davvfs-5.6 {put bad file} -body {
    open mydav/r/r/r w
} -returnCodes 1 -result {r/r/r: Forbidden}

test davvfs-5.7 {delete bad file} {
    file delete mydav/s/s/s
} {}

test davvfs-5.8 {put over dir} -body {
    open mydav/d w
} -returnCodes 1 -result {d: Conflict}

test davvfs-6.1 {copy bad source} -body {
    file copy mydav/g mydav/h
} -returnCodes 1 -result {error copying "mydav/g": no such file or directory}

test davvfs-6.2 {copy bad dest} -body {
    file copy mydav/a mydav/t/t/t
} -returnCodes 1 -result {error copying "mydav/a" to "mydav/t/t/t": Unknown error: 0}

test davvfs-6.3 {copy file over dir} -body {
    file mkdir mydav/g
    file copy mydav/a mydav/g
    file stat mydav/g sb
    array get sb ;# ctime & mtime change each time
} -match glob -result {mtime * atime 0 gid -1 nlink 1 mode 16895 type directory ctime * uid -1 ino 0 size 0 dev -1} \
  -cleanup { file delete -force mydav/g }

test davvfs-6.4 {copy dir over file} -body {
    set fd [open mydav/h w]
    puts -nonewline $fd foo
    close $fd
    file copy dav1 d h
} -returnCodes 1 -result {error copying: target "h" is not a directory} \
  -cleanup { file delete mydav/h }

test davvfs-7.1 {unmount} {
    vfs::unmount mydav
} {}

# -------------------------------------------------------------------------

cleanupTests

# -------------------------------------------------------------------------
# vim: set ft=tcl :

filepatterns
{*.htm *.html}

vimsyntax
{html}

reference
{
  {{5.0 Reference} https://dev.w3.org/html5/html-author/}
}

embedded {
  {PHP        {<\?php$}                                {\?>}}
  {CSS        {<style.*type="text/css".*>$}            {</style>}}
  {JavaScript {<script(.*type="text/javascript".*)?>$} {</script>}}
}

matchcharsallowed
{paren angled double single}

tabsallowed
{0}

casesensitive
{0}

indent
{<[^/>](.*?[^/])?> <\\?}

unindent
{</.+?> \\?>}

icomment {{<!--} {-->}}

bcomments {{{<!--} {-->}} {{<!\[CDATA\[} {\]\]>}}}

strings {{"}}

advanced
{
  HighlightClass tag        keywords       {}
  HighlightClass tag_angled keywords       {}
  HighlightClass attribute  miscellaneous3 {}

  HighlightRegexp {<.+?>} handle_tag

  HighlightProc handle_tag {
    variable tags
    if {![array exists tags]} {
      array set tags {
        b 1 i 1 del 1 big 1 small 1 sub 1 sup 1 xmp 1 a 1 span 1 div 1 img 1 br 1 hr 1 ul 1 li 1 ol 1
        table 1 tr 1 td 1 th 1 !DOCTYPE 1 script 1 html 1 head 1 body 1 title 1 code 1 pre 1 abbr 1
        acronym 1 address 1 area 1 base 1 bdo 1 blockquote 1 button 1 caption 1 cite 1 col 1 colgroup 1
        dfn 1 dl 1 dt 1 em 1 fieldset 1 form 1 h1 1 h2 1 h3 1 h4 1 h5 1 h6 1 input 1 ins 1 kbd 1 label 1
        legend 1 link 1 map 1 meta 1 noscript 1 object 1 optgroup 1 option 1 p 1 param 1 q 1 samp 1
        select 1 small 1 strong 1 style 1 tbody 1 textarea 1 tfoot 1 thead 1 tt 1 var 1
      }
    }
    set str [$txt get $startpos $endpos]
    if {[regexp -indices -start 1 -- {([^ \t/>]+)} $str -> tag_indices]} {
      set tag [string range $str {*}$tag_indices]
      if {[info exists tags($tag)] || (([string index $tag 0] eq "/") && [info exists tags([string range $tag 1 end])])} {
        set start [expr [lindex $tag_indices 1] + 1]
        lappend retval [list tag_angled $startpos [$txt index "$startpos+1c"] [list]]
        lappend retval [list tag [$txt index "$startpos+1c"] [$txt index "$startpos+${start}c"] [list]]
        if {[string index $str end-1] eq "/"} {
          lappend retval [list tag_angled [$txt index "$endpos-2c"] $endpos [list]]
        } else {
          lappend retval [list tag_angled [$txt index "$endpos-1c"] $endpos [list]]
        }
        while {[regexp -indices -start $start {(\\S+)=} $str -> attribute]} {
          set start [expr [lindex $attribute 1] + 1]
          lappend retval [list attribute [$txt index "$startpos+[lindex $attribute 0]c"] [$txt index "$startpos+${start}c"] [list]]
        }
        return [list $retval ""]
      }
    }
    return ""
  } HighlightEndProc
}

formatting
{
  bold          {word <b>      </b>}
  italics       {word <i>      </i>}
  underline     {word <u>      </u>}
  strikethrough {word <strike> </strike>}
  highlight     {word <mark>   </mark>}
  superscript   {word <super>  </super>}
  subscript     {word <sub>    </sub>}
  code          {word <code>   </code>}
  header1       {word <h1>     </h1>}
  header2       {word <h2>     </h2>}
  header3       {word <h3>     </h3>}
  header4       {word <h4>     </h4>}
  header5       {word <h5>     </h5>}
  header6       {word <h6>     </h6>}
  unordered     {word <li>     </li>}
  ordered       {word <li>     </li>}
}

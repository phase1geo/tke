filepatterns
{*.fountain}

reference
{
  {{Syntax Reference} https://fountain.io/syntax}
}

tabsallowed
{1}

linewrap
{1}

escapes
{0}

casesensitive
{1}

matchcharsallowed
{
  paren
}

comments {{{/\*} {\*/}} {{\[\[} {\]\]}}}

advanced {
  HighlightClass bold          none           {bold}
  HighlightClass italics       none           {italics}
  HighlightClass underline     none           {underline}
  HighlightClass grey          meta           {}
  HighlightClass heading       miscellaneous2 {h1}
  HighlightClass section1      punctuation    {h1}
  HighlightClass section2      punctuation    {h2}
  HighlightClass section3      punctuation    {h3}
  HighlightClass section4      punctuation    {h4}
  HighlightClass section5      punctuation    {h5}
  HighlightClass section6      punctuation    {h6}
  HighlightClass number        numbers        {}
  HighlightClass lyrics        miscellaneous3 {}
  HighlightClass parenthetical miscellaneous1 {}
  HighlightClass character     keywords       {}
  HighlightClass pcharacter    none           {}

  HighlightRegexp {(?i)^\s*(int|ext|est|int\./ext|int/ext|i/e|\.)(.*)$} scene_heading
  HighlightRegexp {^\s*~.*$}                                          lyrics
  HighlightRegexp {\(.+?\)}                                           parenthetical
  HighlightRegexp {(\*{2})((?=\S).+?)(\1)}                            bold
  HighlightRegexp {(\*)((?=\S).+?)(\1)}                               italics
  HighlightRegexp {(_)((?=\S).+?)(\1)}                                underline
  HighlightRegexp {^\s*([A-Z][A-Z0-9 ]+|\@[^\(]+)}                    character
  HighlightRegexp {^(#{1,6}).*$}                                      section
  HighlightRegexp {^(=)(.*)$}                                         synopses
  HighlightRegexp {(>).+?(<)}                                         center
  HighlightRegexp {^\s*\S}                                            check_character

  HighlightProc scene_heading {
    array set vars $varlist
    if {[regexp -indices {#.+?#} [string range $str {*}$vars(2)] all]} {
      return [list [list [list heading {*}$vars(0)] \
                         [list number  {*}$vars(2)]] ""]
    } else {
      return [list [list [list heading {*}$vars(0)]] ""]
    }
  } HighlightEndProc

  HighlightProc lyrics {
    array set vars $varlist
    return [list [list [list lyrics {*}$vars(0)]] ""]
  } HighlightEndProc

  HighlightProc parenthetical {
    array set vars $varlist
    return [list [list [list parenthetical {*}$vars(0)]] ""]
  } HighlightEndProc

  HighlightProc character {
    array set vars $varlist
    if {[string trim [$txt get "$row.0-1l linestart" "$row.0-1l lineend"]] eq ""} {
      if {[string trim [$txt get "$row.0+1l linestart" "$row.0+1l lineend"]] ne ""} {
        return [list [list [list character {*}$vars(0)]] ""]
      } else {
        $txt tag add _pcharacter $row.[lindex $vars(0) 0] $row.[expr [lindex $vars(0) 1] + 1]
      }
    }
    return ""
  } HighlightEndProc

  HighlightProc check_character {
    if {[set epos [lassign [$txt tag prevrange _pcharacter $startpos "$row.0-1l linestart"] spos]] ne ""} {
      $txt tag remove _pcharacter $spos $epos
      return [list [list [list character [lindex [split $spos .] 1] [expr [lindex [split $epos .] 1] - 1]]] ""]
    }
    return ""
  } HighlightEndProc

  HighlightProc bold {
    array set vars $varlist
    return [list [list [list bold        {*}$vars(2)] \
                       [list boldmarkers {*}$vars(1)] \
                       [list boldmarkers {*}$vars(4)] \
                       [list grey        {*}$vars(1)] \
                       [list grey        {*}$vars(4)]] ""]
  } HighlightEndProc

  HighlightProc italics {
    array set vars $varlist
    if {([lsearch [$txt tag names $row.[lindex $vars(0) 0] _boldmarkers] == -1) && \
        ([lsearch [$txt tag names $row.[lindex $vars(4) 0] _boldmarkers] == -1)} {
      return [list [list [list italics {*}$vars(2)] \
                         [list grey    {*}$vars(1)] \
                         [list grey    {*}$vars(4)]] ""]
    } else {
      return [list [list] [lindex $vars(2) 0]]
    }
  } HighlightEndProc

  HighlightProc underline {
    array set vars $varlist
    return [list [list [list underline {*}$vars(2)] \
                       [list grey      {*}$vars(1)] \
                       [list grey      {*}$vars(4)]] ""]
  } HighlightEndProc

  HighlightProc section {
    array set vars $varlist
    set num [string range $str {*}$vars(1)]
    return [list [list [list section$num {*}$vars(2)] \
                       [list grey        {*}$vars(1)]] ""]
  } HighlightEndProc

  HighlightProc synopses {
    array set vars $varlist
    if {[string range $str end-3 end] eq "==="} {
      return [list [list [list grey {*}$vars(0)]] ""]
    } else {
      return [list [list [list section6 {*}$vars(2)] \
                         [list grey     {*}$vars(1)]] ""]
    }
  } HighlightEndProc

  HighlightProc center {
    array set vars $varlist
    return [list [list [list grey {*}$vars(1)] \
                       [list grey {*}$vars(2)]] ""]
  } HighlightEndProc

}

formatting
{
  bold      {word **{TEXT}**}
  italics   {word *{TEXT}*}
  underline {word _{TEXT}_}
  header1   {line {# {TEXT}}}
  header2   {line {## {TEXT}}}
  header3   {line {### {TEXT}}}
  header4   {line {#### {TEXT}}}
  header5   {line {##### {TEXT}}}
  header6   {line {###### {TEXT}}}
}

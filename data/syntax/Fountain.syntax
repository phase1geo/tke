filepatterns
{*.fountain}

reference
{
  {{Syntax Reference} https://fountain.io/syntax}
}

tabsallowed
{1}

linewrap
{1}

escapes
{0}

casesensitive
{1}

matchcharsallowed
{
  paren
}

bcomments {{{/\*} {\*/}} {{\[\[} {\]\]}}}

advanced {
  HighlightClass bold          none           {bold}
  HighlightClass italics       none           {italics}
  HighlightClass underline     none           {underline}
  HighlightClass grey          meta           {}
  HighlightClass heading       miscellaneous2 {h1}
  HighlightClass section1      punctuation    {h1}
  HighlightClass section2      punctuation    {h2}
  HighlightClass section3      punctuation    {h3}
  HighlightClass section4      punctuation    {h4}
  HighlightClass section5      punctuation    {h5}
  HighlightClass section6      punctuation    {h6}
  HighlightClass number        numbers        {}
  HighlightClass lyrics        miscellaneous3 {}
  HighlightClass parenthetical miscellaneous1 {}
  HighlightClass character     keywords       {}
  HighlightClass pcharacter    none           {}

  HighlightRegexp {(?i)^\s*\.?(int|ext|est|int\./ext|int/ext|i/e).*$} scene_heading
  HighlightRegexp {^\s*~.*$}                                      lyrics
  HighlightRegexp {\(.+?\)}                                       parenthetical
  HighlightRegexp {(\*{2})(?=\S).+?\1}                            bold
  HighlightRegexp {(\*)(?=\S).+?\1}                               italics
  HighlightRegexp {(_)(?=\S).+?\1}                                underline
  HighlightRegexp {^\s*([A-Z][A-Z0-9 ]+|\@[^\(]+)}                 character
  HighlightRegexp {^#.*$}                                         section
  HighlightRegexp {^=.*$}                                         synopses
  HighlightRegexp {>(?=\S).+?<}                                   center
  HighlightRegexp {^\s*\S}                                        check_character

  HighlightProc scene_heading {
    if {[regexp -indices {#.+?#} [$txt get $startpos $endpos] all]} {
      return [list [list [list heading $startpos $endpos [list]] \
                         [list number  [$txt index "$startpos+[lindex $all 0]c"] [$txt index "$startpos+[expr [lindex $all 1] + 1]c"] [list]]] ""]
    } else {
      return [list [list [list heading $startpos $endpos [list]]] ""]
    }
  }

  HighlightProc lyrics {
    return [list [list [list lyrics $startpos $endpos [list]]] ""]
  }

  HighlightProc parenthetical {
    return [list [list [list parenthetical $startpos $endpos [list]]] ""]
  }

  HighlightProc character {
    if {[string trim [$txt get "$endpos-1l linestart" "$endpos-1l lineend"]] eq ""} {
      if {[string trim [$txt get "$endpos+1l linestart" "$endpos+1l lineend"]] ne ""} {
        return [list [list [list character $startpos $endpos [list]]] ""]
      } else {
        $txt tag add _pcharacter $startpos $endpos
      }
    }
    return ""
  }

  HighlightProc check_character {
    if {[set epos [lassign [$txt tag prevrange _pcharacter $startpos "$endpos-1l linestart"] spos]] ne ""} {
      $txt tag remove _pcharacter $spos $epos
      return [list [list [list character $spos $epos [list]]] ""]
    }
    return ""
  }

  HighlightProc bold {
    return [list [list [list bold        [$txt index "$startpos+2c"] [$txt index "$endpos-2c"] [list]] \
                       [list boldmarkers $startpos [$txt index "$startpos+2c"] [list]] \
                       [list boldmarkers [$txt index "$endpos-2c"] $endpos [list]] \
                       [list grey        $startpos [$txt index "$startpos+2c"] [list]] \
                       [list grey        [$txt index "$endpos-2c"] $endpos [list]]] ""]
  }

  HighlightProc italics {
    if {([lsearch [$txt tag names $startpos]    _boldmarkers] == -1) && \
        ([lsearch [$txt tag names "$endpos-1c"] _boldmarkers] == -1)} {
      return [list [list [list italics [$txt index "$startpos+1c"] [$txt index "$endpos-1c"] [list]] \
                         [list grey    $startpos [$txt index "$startpos+1c"] [list]] \
                         [list grey    [$txt index "$endpos-1c"] $endpos [list]]] ""]
    } else {
      return [list [list] [$txt index "$startpos+2c"]]
    }
  }

  HighlightProc underline {
    return [list [list [list underline [$txt index "$startpos+1c"] [$txt index "$endpos-1c"] [list]] \
                       [list grey      $startpos [$txt index "$startpos+1c"] [list]] \
                       [list grey      [$txt index "$endpos-1c"] $endpos [list]]] ""]
  }

  HighlightProc section {
    if {[regexp {(#{1,6})[^#]+} [$txt get $startpos $endpos] all hashes]} {
      set num [string length $hashes]
      return [list [list [list section$num [$txt index "$startpos+${num}c"] [$txt index "$startpos+[string length $all]c"] [list]] \
                         [list grey        $startpos [$txt index "$startpos+${num}c"] [list]]] ""]
    }
    return ""
  }

  HighlightProc synopses {
    if {[regexp {={3}$} [$txt get $startpos $endpos]]} {
      return [list [list [list grey $startpos $endpos [list]]] ""]
    } else {
      return [list [list [list section6 [$txt index "$startpos+1c"] $endpos [list]] \
                         [list grey     $startpos [$txt index "$startpos+1c"] [list]]] ""]
    }
  }

  HighlightProc center {
    return [list [list [list grey $startpos [$txt index "$startpos+1c"] [list]] \
                       [list grey [$txt index "$endpos-1c"] $endpos [list]]] [$txt index "$startpos+1c"]]
  }

}

formatting
{
  bold      {** **}
  italics   {*  *}
  underline {_  _}
  header1   {{# }}
  header2   {{## }}
  header3   {{### }}
  header4   {{#### }}
  header5   {{##### }}
  header6   {{###### }}
}

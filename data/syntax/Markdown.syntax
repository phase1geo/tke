filepatterns
{*.md *.markdown *.txt}

vimsyntax
{markdown}

reference
{
  {{Syntax Reference} http://daringfireball.net/projects/markdown/syntax}
}

embedded
{
  {HTML}
  {C          {```c$}          {```$}}
  {C++        {```cpp$}        {```$}}
  {Python     {```python$}     {```$}}
  {JavaScript {```javascript$} {```$}}
}

tabsallowed
{1}

linewrap
{1}

casesensitive
{1}

advanced {
  HighlightClass bold    {-fgtheme keywords       -fontopts bold}
  HighlightClass italics {-fgtheme keywords       -fontopts italics}
  HighlightClass super   {-fgtheme numbers        -fontopts superscript}
  HighlightClass sub     {-fgtheme numbers        -fontopts subscript}
  HighlightClass h1      {-fgtheme miscellaneous2 -fontopts h1}
  HighlightClass h2      {-fgtheme miscellaneous2 -fontopts h2}
  HighlightClass h3      {-fgtheme miscellaneous2 -fontopts h3}
  HighlightClass h4      {-fgtheme miscellaneous2 -fontopts h4}
  HighlightClass h5      {-fgtheme miscellaneous2 -fontopts h5}
  HighlightClass h6      {-fgtheme miscellaneous2 -fontopts h6}
  HighlightClass quote   {-fgtheme punctuation}
  HighlightClass ref     {-fgtheme miscellaneous1 -fontopts underline -clickcmd syntax::markdown::handle_reflink_click}
  HighlightClass url     {-fgtheme miscellaneous1 -fontopts underline -clickcmd syntax::markdown::handle_urllink_click}
  HighlightClass code    {-fgtheme precompile     -fontopts code}
  HighlightClass ccode   {-fgtheme precompile     -fontopts code}
  HighlightClass strike  {-fontopts overstrike}
  HighlightClass hilite  {-fgtheme background -bgtheme highlighter}
  HighlightClass meta    {-fgtheme meta}
  HighlightClass check   {-clickcmd syntax::markdown::handle_checkbox_click}

  HighlightRegexp {(``)(.+?)(``)}                          ccode
  HighlightRegexp {(`)(.+?)(`)}                            code
  HighlightRegexp {^(#{1,6})(.*?)$}                        header
  HighlightRegexp {^(>)(.*?)$}                             quote
  HighlightRegexp {([*_]{2})((?=\S).+?)(\1)}               bold
  HighlightRegexp {([*_])((?=\S).+?)(\1)}                  italics
  HighlightRegexp {(!?\[)([^\]]+)(\]\s*\[)(.*?)(\])}       reflink
  HighlightRegexp {(!?\[)([^\]]+)(\]\()(\S+)(\s+.*?)(\))}  urllink
  HighlightRegexp {^\s*\[(.+?)\]:\s+(\S+)}                 linkref
  HighlightRegexp {([~|]{2})((?=\S).+?)(\1)}               overstrike
  HighlightRegexp {(~)((?=\S).+?)(\1)}                     subscript
  HighlightRegexp {(\^)((?=\S).+?)(\1)}                    superscript
  HighlightRegexp {([=:]{2})((?=\S).+?)(\1)}               highlight
  HighlightRegexp {\[[ xX]\]}                              checkbox
  HighlightRegexp {.*?$}                                   list_check

  HighlightProc ccode {
    array set vars $varlist
    $txt tag remove _code $row.[lindex $vars(0) 0] $row.[expr [lindex $vars(0) 1] + 1]
    return [list [list [list ccode       {*}$vars(2)] \
                       [list codemarkers {*}$vars(1)] \
                       [list codemarkers {*}$vars(3)] \
                       [list meta        {*}$vars(1)] \
                       [list meta        {*}$vars(3)]] ""]
  } HighlightEndProc

  HighlightProc code {
    array set vars $varlist
    if {([lsearch [$txt tag names $row.[lindex $vars(0) 0] _codemarkers] == -1) && \
        ([lsearch [$txt tag names $row.[lindex $vars(0) 1] _codemarkers] == -1)} {
      return [list [list [list code {*}$vars(2)] \
                         [list meta {*}$vars(1)] \
                         [list meta {*}$vars(3)]] ""]
    } else {
      return [list [list] [lindex $vars(2) 0]]
    }
  } HighlightEndProc

  HighlightProc header {
    array set vars $varlist
    set num [string length [string range $str {*}$vars(1)]]
    return [list [list [list h$num {*}$vars(2)] \
                       [list meta  {*}$vars(1)]] ""]
  } HighlightEndProc

  HighlightProc quote {
    array set vars $varlist
    return [list [list [list quote {*}$vars(2)] \
                       [list meta  {*}$vars(1)]] ""]
  } HighlightEndProc

  HighlightProc bold {
    array set vars $varlist
    $txt tag remove _italics $row.[lindex $vars(0) 0] $row.[expr [lindex $vars(0) 1] + 1]
    return [list [list [list bold        {*}$vars(2)] \
                       [list boldmarkers {*}$vars(1)] \
                       [list boldmarkers {*}$vars(4)] \
                       [list meta        {*}$vars(1)] \
                       [list meta        {*}$vars(4)]] ""]
  } HighlightEndProc

  HighlightProc italics {
    array set vars $varlist
    if {([lsearch [$txt tag names $row.[lindex $vars(0) 0]] _boldmarkers] == -1) && \
        ([lsearch [$txt tag names $row.[lindex $vars(0) 1]] _boldmarkers] == -1)} {
      return [list [list [list italics {*}$vars(2)] \
                         [list meta    {*}$vars(1)] \
                         [list meta    {*}$vars(4)]] ""]
    } else {
      return [list [list] [lindex $vars(2) 0]]
    }
  } HighlightEndProc

  HighlightProc overstrike {
    array set vars $varlist
    return [list [list [list strike        {*}$vars(2)] \
                       [list strikemarkers {*}$vars(1)] \
                       [list strikemarkers {*}$vars(4)] \
                       [list meta          {*}$vars(1)] \
                       [list meta          {*}$vars(4)]] ""]
  } HighlightEndProc

  HighlightProc highlight {
    array set vars $varlist
    return [list [list [list hilite {*}$vars(2)] \
                       [list meta   {*}$vars(1)] \
                       [list meta   {*}$vars(4)]] ""]
  } HighlightEndProc

  HighlightProc subscript {
    array set vars $varlist
    if {([lsearch [$txt tag names $row.[lindex $vars(0) 0] _strikemarkers] == -1) && \
        ([lsearch [$txt tag names $row.[lindex $vars(0) 1] _strikemarkers] == -1)} {
      return [list [list [list sub  {*}$vars(2)] \
                         [list meta {*}$vars(1)] \
                         [list meta {*}$vars(4)]] ""]
    } else {
      return [list [list] [lindex $vars(2) 0]]
    }
  } HighlightEndProc

  HighlightProc superscript {
    array set vars $varlist
    return [list [list [list super {*}$vars(2)] \
                       [list meta  {*}$vars(1)] \
                       [list meta  {*}$vars(4)]] ""]
  } HighlightEndProc

  HighlightProc reflink {
    array set vars $varlist
    return [list [list [list link {*}$vars(2)] \
                       [list meta {*}$vars(1)] \
                       [list meta {*}$vars(3)] \
                       [list ref  {*}$vars(4)] \
                       [list meta {*}$vars(5)]] ""]
  } HighlightEndProc

  HighlightProc urllink {
    array set vars $varlist
    return [list [list [list link {*}$vars(2)] \
                       [list meta {*}$vars(1)] \
                       [list meta {*}$vars(3)] \
                       [list url  {*}$vars(4)] \
                       [list meta {*}$vars(6)]] ""]
  } HighlightEndProc

  HighlightProc linkref {
    variable linkrefs
    array set vars $varlist
    set linkref [string tolower [string range {*}$vars(1)]]
    set url     [string range {*}$vars(2)]
    set linkrefs($txt,$linkref) $url
    return ""
  } HighlightEndProc

  HighlightProc checkbox {
    array set vars $varlist
    return [list [list [list check {*}$vars(0)]] ""]
  } HighlightEndProc

  HighlightProc handle_urllink_click {txt startpos endpos} {
    utils::open_file_externally [$txt get $startpos $endpos]
  } HighlightEndProc

  HighlightProc handle_reflink_click {txt startpos endpos} {
    variable linkrefs
    if {[info exists linkrefs($txt,[string tolower [$txt get $startpos $endpos]])]} {
      utils::open_file_externally $linkrefs($txt,$ref)
    }
  } HighlightEndProc

  HighlightProc handle_checkbox_click {txt startpos endpos} {
    $txt replace "$startpos+1c" "$startpos+2c" [expr {([$txt get "$startpos+1c"] eq " ") ? "x" : " "}]
  } HighlightEndProc

  HighlightProc list_check {
    if {[$txt compare $row.[expr [lindex $vars(0) 1] + 1] < insert] && $ins} {
      if {![$txt is firstchar firstchar] && [$txt is firstchar [set fchar [$txt index [list firstchar -startpos index-1l]]]]} {
        if {[regexp {^([+*>-]|(\\d+)\\.|\\[[ xX]\\]) (.*)$} [$txt get $fchar "$fchar lineend"] -> match num rest]} {
          if {[string trim $rest] eq ""} {
            $txt replace -highlight 0 "insert-1l linestart" insert "\n"
          } elseif {![regexp {^\\s*([+*>-]|(\\d+)\\.|\\[[ xX]\\])} [$txt get insert "insert lineend"]]} {
            if {($num ne "")} {
              $txt insert -highlight 0 insert "[expr $num + 1]. "
            } else {
              $txt insert -highlight 0 insert "$match "
            }
          }
        }
      }
    }
    return ""
  } HighlightEndProc
}

formatting
{
  bold          {word **{TEXT}**}
  italics       {word _{TEXT}_}
  underline     {word <u>{TEXT}</u>}
  strikethrough {word ~~{TEXT}~~}
  highlight     {word =={TEXT}==}
  superscript   {word ^{TEXT}^}
  subscript     {word ~{TEXT}~}
  code          {word `{TEXT}`}
  header1       {line {# {TEXT}}}
  header2       {line {## {TEXT}}}
  header3       {line {### {TEXT}}}
  header4       {line {#### {TEXT}}}
  header5       {line {##### {TEXT}}}
  header6       {line {###### {TEXT}}}
  unordered     {line {* {TEXT}}}
  checkbox      {line {[ ] {TEXT}}}
  link          {word [{TEXT}]({REF})}
  image         {word ![{TEXT}]({REF})}
}

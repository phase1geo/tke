swatch {{#f4f4f4} #cccccc #000000 #295a7e #848484}
creator {Alex Plotnikov}
website {https://aplsimple.bitbucket.io}
date {1629985508}
images,form_close {dat {#define close_width 8
#define close_height 8
static unsigned char close_bits[] = {
   0x44, 0xee, 0x7c, 0x38, 0x7c, 0xee, 0x44, 0x00};
} fg black msk {#define close_width 8
#define close_height 8
static unsigned char close_bits[] = {
   0x44, 0xee, 0x7c, 0x38, 0x7c, 0xee, 0x44, 0x00};
}}
images,menu_check {dat {#define menu_check_width 10
#define menu_check_height 10
static unsigned char menu_check_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x78, 0x00, 0x78, 0x00,
   0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
} fg black msk {#define menu_check_width 10
#define menu_check_height 10
static unsigned char menu_check_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x78, 0x00, 0x78, 0x00,
   0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
}}
images,menu_diff {fg #000000 dat {#define img_width 8
#define img_height 8
static char img_bits[] = {
0x1f, 0x1f, 0x11, 0xff, 0xdf, 0x88, 0xd8, 0xf8};} msk {#define img_width 8
#define img_height 8
static char img_bits[] = {
0x1f, 0x1f, 0x11, 0xff, 0xdf, 0x88, 0xd8, 0xf8};}}
images,menu_lock {fg #000000 dat {#define img_width 8
#define img_height 8
static char img_bits[] = {
0x3e, 0x7f, 0x63, 0x7f, 0x7f, 0x77, 0x77, 0x7f};} msk {#define img_width 8
#define img_height 8
static char img_bits[] = {
0x3e, 0x7f, 0x63, 0x7f, 0x7f, 0x77, 0x77, 0x7f};}}
images,menu_nocheck {dat {#define menu_nocheck_width 10
#define menu_nocheck_height 10
static unsigned char menu_nocheck_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
} fg black msk {#define menu_nocheck_width 10
#define menu_nocheck_height 10
static unsigned char menu_nocheck_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
}}
images,menu_readonly {fg #000000 dat {#define img_width 8
#define img_height 8
static char img_bits[] = {
0x3e, 0x7f, 0x63, 0x7f, 0x7f, 0x77, 0x77, 0x7f};} msk {#define img_width 8
#define img_height 8
static char img_bits[] = {
0x3e, 0x7f, 0x63, 0x7f, 0x7f, 0x77, 0x77, 0x7f};}}
images,pref_advanced {file advanced.gif dir install}
images,pref_appearance {file appearance.gif dir install}
images,pref_check {file check.gif dir install}
images,pref_checked {file checked.gif dir install}
images,pref_documentation {file documentation.gif dir install}
images,pref_editor {file editor.gif dir install}
images,pref_emmet {file emmet.gif dir install}
images,pref_find {file find.gif dir install}
images,pref_general {file general.gif dir install}
images,pref_plugins {file plugins.gif dir install}
images,pref_shortcuts {file shortcut.gif dir install}
images,pref_sidebar {file sidebar.gif dir install}
images,pref_snippets {file snippets.gif dir install}
images,pref_unchecked {file unchecked.gif dir install}
images,pref_view {file view.gif dir install}
images,remote_back {fg #000000 dat {#define img_width 18
#define img_height 10
static char img_bits[] = {
0x00, 0x0c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0x00, 0x80, 0x0f, 0x00, 0xc0, 0x0f, 0x00, 0xc0, 0x0f, 0x00, 0x80, 0x0f, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0c, 0x00};} msk {#define img_width 18
#define img_height 10
static char img_bits[] = {
0x00, 0x0c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0x00, 0x80, 0x0f, 0x00, 0xc0, 0x0f, 0x00, 0xc0, 0x0f, 0x00, 0x80, 0x0f, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0c, 0x00};}}
images,remote_back_disabled {fg #848484 dat {#define img_width 18
#define img_height 10
static char img_bits[] = {
0x00, 0x0c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0x00, 0x80, 0x0f, 0x00, 0xc0, 0x0f, 0x00, 0xc0, 0x0f, 0x00, 0x80, 0x0f, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0c, 0x00};} msk {#define img_width 18
#define img_height 10
static char img_bits[] = {
0x00, 0x0c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0x00, 0x80, 0x0f, 0x00, 0xc0, 0x0f, 0x00, 0xc0, 0x0f, 0x00, 0x80, 0x0f, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0c, 0x00};}}
images,remote_connected {fg #000000 dat {#define img_width 16
#define img_height 16
static char img_bits[] = {
0x00, 0x00, 0x00, 0x20, 0x00, 0x70, 0x00, 0x3f, 0x80, 0x1f, 0xc0, 0x1f, 0xe0, 0x1f, 0x70, 0x1f, 0xf8, 0x0e, 0xf8, 0x07, 0xf8, 0x03, 0xf8, 0x01, 0xfc, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x00, 0x00};} msk {#define img_width 16
#define img_height 16
static char img_bits[] = {
0x00, 0x00, 0x00, 0x20, 0x00, 0x70, 0x00, 0x3f, 0x80, 0x1f, 0xc0, 0x1f, 0xe0, 0x1f, 0x70, 0x1f, 0xf8, 0x0e, 0xf8, 0x07, 0xf8, 0x03, 0xf8, 0x01, 0xfc, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x00, 0x00};}}
images,remote_connecting {fg #000000 dat {#define img_width 16
#define img_height 16
static char img_bits[] = {
0x00, 0x40, 0x00, 0xec, 0x00, 0x7e, 0x00, 0x3f, 0x80, 0x7f, 0x00, 0x7f, 0x40, 0x3e, 0x70, 0x1c, 0x38, 0x08, 0x7c, 0x03, 0xfe, 0x01, 0xfe, 0x01, 0xfc, 0x00, 0x7e, 0x00, 0x37, 0x00, 0x02, 0x00};} msk {#define img_width 16
#define img_height 16
static char img_bits[] = {
0x00, 0x40, 0x00, 0xec, 0x00, 0x7e, 0x00, 0x3f, 0x80, 0x7f, 0x00, 0x7f, 0x40, 0x3e, 0x70, 0x1c, 0x38, 0x08, 0x7c, 0x03, 0xfe, 0x01, 0xfe, 0x01, 0xfc, 0x00, 0x7e, 0x00, 0x37, 0x00, 0x02, 0x00};}}
images,remote_directory {fg #000000 dat {#define img_width 18
#define img_height 10
static char img_bits[] = {
0xc0, 0x00, 0x00, 0xc0, 0x01, 0x00, 0xc0, 0x03, 0x00, 0xc0, 0x07, 0x00, 0xc0, 0x0f, 0x00, 0xc0, 0x0f, 0x00, 0xc0, 0x07, 0x00, 0xc0, 0x03, 0x00, 0xc0, 0x01, 0x00, 0xc0, 0x00, 0x00};} msk {#define img_width 18
#define img_height 10
static char img_bits[] = {
0xc0, 0x00, 0x00, 0xc0, 0x01, 0x00, 0xc0, 0x03, 0x00, 0xc0, 0x07, 0x00, 0xc0, 0x0f, 0x00, 0xc0, 0x0f, 0x00, 0xc0, 0x07, 0x00, 0xc0, 0x03, 0x00, 0xc0, 0x01, 0x00, 0xc0, 0x00, 0x00};}}
images,remote_file {fg 2 dat {#define blank_width 8
#define blank_height 8
static unsigned char blank_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
} msk {#define blank_width 8
#define blank_height 8
static unsigned char blank_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
}}
images,remote_next {fg #000000 dat {#define img_width 18
#define img_height 10
static char img_bits[] = {
0xc0, 0x00, 0x00, 0xc0, 0x01, 0x00, 0xc0, 0x03, 0x00, 0xc0, 0x07, 0x00, 0xc0, 0x0f, 0x00, 0xc0, 0x0f, 0x00, 0xc0, 0x07, 0x00, 0xc0, 0x03, 0x00, 0xc0, 0x01, 0x00, 0xc0, 0x00, 0x00};} msk {#define img_width 18
#define img_height 10
static char img_bits[] = {
0xc0, 0x00, 0x00, 0xc0, 0x01, 0x00, 0xc0, 0x03, 0x00, 0xc0, 0x07, 0x00, 0xc0, 0x0f, 0x00, 0xc0, 0x0f, 0x00, 0xc0, 0x07, 0x00, 0xc0, 0x03, 0x00, 0xc0, 0x01, 0x00, 0xc0, 0x00, 0x00};}}
images,remote_next_disabled {fg #848484 dat {#define img_width 18
#define img_height 10
static char img_bits[] = {
0xc0, 0x00, 0x00, 0xc0, 0x01, 0x00, 0xc0, 0x03, 0x00, 0xc0, 0x07, 0x00, 0xc0, 0x0f, 0x00, 0xc0, 0x0f, 0x00, 0xc0, 0x07, 0x00, 0xc0, 0x03, 0x00, 0xc0, 0x01, 0x00, 0xc0, 0x00, 0x00};} msk {#define img_width 18
#define img_height 10
static char img_bits[] = {
0xc0, 0x00, 0x00, 0xc0, 0x01, 0x00, 0xc0, 0x03, 0x00, 0xc0, 0x07, 0x00, 0xc0, 0x0f, 0x00, 0xc0, 0x0f, 0x00, 0xc0, 0x07, 0x00, 0xc0, 0x03, 0x00, 0xc0, 0x01, 0x00, 0xc0, 0x00, 0x00};}}
images,search_next {fg 2 dat {#define right_width 18
#define right_height 10
static unsigned char right_bits[] = {
   0xc0, 0x00, 0x00, 0xc0, 0x01, 0x00, 0xc0, 0x03, 0x00, 0xc0, 0x07, 0x00,
   0xc0, 0x0f, 0x00, 0xc0, 0x0f, 0x00, 0xc0, 0x07, 0x00, 0xc0, 0x03, 0x00,
   0xc0, 0x01, 0x00, 0xc0, 0x00, 0x00};
} msk {#define right_width 18
#define right_height 10
static unsigned char right_bits[] = {
   0xc0, 0x00, 0x00, 0xc0, 0x01, 0x00, 0xc0, 0x03, 0x00, 0xc0, 0x07, 0x00,
   0xc0, 0x0f, 0x00, 0xc0, 0x0f, 0x00, 0xc0, 0x07, 0x00, 0xc0, 0x03, 0x00,
   0xc0, 0x01, 0x00, 0xc0, 0x00, 0x00};
}}
images,search_prev {fg 2 dat {#define left_width 18
#define left_height 10
static unsigned char left_bits[] = {
   0x00, 0x0c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0x00, 0x80, 0x0f, 0x00,
   0xc0, 0x0f, 0x00, 0xc0, 0x0f, 0x00, 0x80, 0x0f, 0x00, 0x00, 0x0f, 0x00,
   0x00, 0x0e, 0x00, 0x00, 0x0c, 0x00};
} msk {#define left_width 18
#define left_height 10
static unsigned char left_bits[] = {
   0x00, 0x0c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0x00, 0x80, 0x0f, 0x00,
   0xc0, 0x0f, 0x00, 0xc0, 0x0f, 0x00, 0x80, 0x0f, 0x00, 0x00, 0x0f, 0x00,
   0x00, 0x0e, 0x00, 0x00, 0x0c, 0x00};
}}
images,sidebar_collapsed {fg #f4f4f4 dat {#define img_width 10
#define img_height 10
static char img_bits[] = {
0x0c, 0x00, 0x1c, 0x00, 0x3c, 0x00, 0x7c, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x7c, 0x00, 0x3c, 0x00, 0x1c, 0x00, 0x0c, 0x00};} msk {#define img_width 10
#define img_height 10
static char img_bits[] = {
0x0c, 0x00, 0x1c, 0x00, 0x3c, 0x00, 0x7c, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x7c, 0x00, 0x3c, 0x00, 0x1c, 0x00, 0x0c, 0x00};}}
images,sidebar_collapsed_sel {fg black dat {#define right_width 10
#define right_height 10
static unsigned char right_bits[] = {
   0x0c, 0x00, 0x1c, 0x00, 0x3c, 0x00, 0x7c, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x7c, 0x00, 0x3c, 0x00, 0x1c, 0x00, 0x0c, 0x00 };
} msk {#define right_width 10
#define right_height 10
static unsigned char right_bits[] = {
   0x0c, 0x00, 0x1c, 0x00, 0x3c, 0x00, 0x7c, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x7c, 0x00, 0x3c, 0x00, 0x1c, 0x00, 0x0c, 0x00 };
}}
images,sidebar_expanded {fg #f4f4f4 dat {#define img_width 10
#define img_height 10
static char img_bits[] = {
0x00, 0x00, 0x00, 0x00, 0xff, 0x03, 0xff, 0x03, 0xfe, 0x01, 0xfc, 0x00, 0x78, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00};} msk {#define img_width 10
#define img_height 10
static char img_bits[] = {
0x00, 0x00, 0x00, 0x00, 0xff, 0x03, 0xff, 0x03, 0xfe, 0x01, 0xfc, 0x00, 0x78, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00};}}
images,sidebar_expanded_sel {fg black dat {#define down_width 10
#define down_height 10
static unsigned char down_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0xff, 0x03, 0xff, 0x03, 0xfe, 0x01, 0xfc, 0x00, 0x78, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00 };
} msk {#define down_width 10
#define down_height 10
static unsigned char down_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0xff, 0x03, 0xff, 0x03, 0xfe, 0x01, 0xfc, 0x00, 0x78, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00 };
}}
images,sidebar_file {fg white dat {#define img_width 10
#define img_height 10
static char img_bits[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x78, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};} msk {#define img_width 10
#define img_height 10
static char img_bits[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x78, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};}}
images,sidebar_hidden {dat {#define img_width 5
#define img_height 15
static char img_bits[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};} msk {#define img_width 5
#define img_height 15
static char img_bits[] = {
0x1f, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1f};} fg white bg #fefc25}
images,sidebar_info_close {fg 1 dat {#define close_width 8
#define close_height 8
static unsigned char close_bits[] = {
   0x44, 0xee, 0x7c, 0x38, 0x7c, 0xee, 0x44, 0x00};
} msk {#define close_width 8
#define close_height 8
static unsigned char close_bits[] = {
   0x44, 0xee, 0x7c, 0x38, 0x7c, 0xee, 0x44, 0x00};
}}
images,sidebar_info_refresh {fg 1 dat {#define refresh_width 8
#define refresh_height 8
static unsigned char refresh_bits[] = {
   0x3c, 0x7c, 0xe0, 0xe2, 0x47, 0x07, 0x3e, 0x3c};
} msk {#define refresh_width 8
#define refresh_height 8
static unsigned char refresh_bits[] = {
   0x3c, 0x7c, 0xe0, 0xe2, 0x47, 0x07, 0x3e, 0x3c};
}}
images,sidebar_info_show {fg 1 dat {#define bullet_width 8
#define bullet_height 8
static char bullet_bits = {
  0x00, 0x3c, 0x66, 0xdb, 0xdb, 0x66, 0x3c, 0x00
}
} msk {#define bullet_width 8
#define bullet_height 8
static char bullet_bits = {
  0x00, 0x3c, 0x66, 0xdb, 0xdb, 0x66, 0x3c, 0x00
}
}}
images,sidebar_open {dat {#define img_width 5
#define img_height 15
static char img_bits[] = {
0x00, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x00};} msk {#define img_width 5
#define img_height 15
static char img_bits[] = {
0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f};} fg #ffff00 bg #ff0000}
images,tab_activeclose {fg 2 dat {#define active_close_width 9
#define active_close_height 9
static unsigned char active_close_bits[] = {
   0x00, 0x00, 0xc6, 0x00, 0xee, 0x00, 0x7c, 0x00, 0x38, 0x00, 0x7c, 0x00, 0xee, 0x00, 0xc6, 0x00, 0x00, 0x00 };
} msk {#define active_close_width 9
#define active_close_height 9
static unsigned char active_close_bits[] = {
   0x00, 0x00, 0xc6, 0x00, 0xee, 0x00, 0x7c, 0x00, 0x38, 0x00, 0x7c, 0x00, 0xee, 0x00, 0xc6, 0x00, 0x00, 0x00 };
}}
images,tab_close {dat {#define img_width 9
#define img_height 9
static char img_bits[] = {
0x00, 0x00, 0x44, 0x00, 0xee, 0x00, 0x7c, 0x00, 0x38, 0x00, 0x7c, 0x00, 0xee, 0x00, 0x44, 0x00, 0x00, 0x00};} fg #000000 msk {#define img_width 9
#define img_height 9
static char img_bits[] = {
0xff, 0x01, 0x44, 0x00, 0xee, 0x00, 0x7c, 0x00, 0x38, 0x00, 0x7c, 0x00, 0xee, 0x00, 0x44, 0x00, 0x00, 0x00};}}
images,tab_diff {fg #000000 dat {#define img_width 8
#define img_height 8
static char img_bits[] = {
0x1f, 0x1f, 0x11, 0xff, 0xdf, 0x88, 0xd8, 0xf8};} msk {#define img_width 8
#define img_height 8
static char img_bits[] = {
0x1f, 0x1f, 0x11, 0xff, 0xdf, 0x88, 0xd8, 0xf8};}}
images,tab_lock {fg #000000 dat {#define img_width 8
#define img_height 8
static char img_bits[] = {
0x3e, 0x7f, 0x63, 0x7f, 0x7f, 0x77, 0x77, 0x7f};} msk {#define img_width 8
#define img_height 8
static char img_bits[] = {
0x3e, 0x7f, 0x63, 0x7f, 0x7f, 0x77, 0x77, 0x7f};}}
images,tab_readonly {fg #000000 dat {#define img_width 8
#define img_height 8
static char img_bits[] = {
0x3e, 0x7f, 0x63, 0x7f, 0x7f, 0x77, 0x77, 0x7f};} msk {#define img_width 8
#define img_height 8
static char img_bits[] = {
0x3e, 0x7f, 0x63, 0x7f, 0x7f, 0x77, 0x77, 0x7f};}}
launcher,-background {white}
launcher,-bordercolor {grey90}
launcher,-borderwidth {5}
launcher,-foreground {black}
launcher,-listbackground {white}
launcher,-listforeground {black}
launcher,-scrollcolor {grey90}
launcher,-scrollwidth {10}
launcher,-selectbackground {#94a58e}
launcher,-selectforeground {black}
launcher,-spacercolor {white}
launcher,-spacerheight {5}
launcher,-textbackground {#f4f4f4}
launcher,-textforeground {#000000}
menus,-activebackground {#b1c2ab}
menus,-activeforeground {black}
menus,-background {#3d413f}
menus,-disabledforeground {#cccccc}
menus,-foreground {#ffffff}
menus,-relief {flat}
menus,-selectcolor {black}
meta,syntax,embedded {}
misc_scrollbar,-background {#cccccc}
misc_scrollbar,-foreground {#000000}
misc_scrollbar,-thickness {15}
sidebar,-background {#515753}
sidebar,-dropcolor {green}
sidebar,-foreground {#ffffff}
sidebar,-highlightbackground {#000000}
sidebar,-highlightcolor {#000000}
sidebar,-highlightthickness {1}
sidebar,-movebackground {#008000}
sidebar,-moveforeground {#ffff00}
sidebar,-relief {flat}
sidebar,-selectbackground {#b1c2ab}
sidebar,-selectforeground {#000000}
sidebar_info,-active_background {#595d5b}
sidebar_info,-background {#3d413f}
sidebar_info,-title_foreground {#cccccc}
sidebar_info,-value_foreground {#f4f4f4}
sidebar_scrollbar,-background {#000000}
sidebar_scrollbar,-foreground {#cccccc}
sidebar_scrollbar,-thickness {15}
syntax,attention {red}
syntax,background {#fcfdfb}
syntax,border_highlight {gold}
syntax,closed_fold {#e7c96a}
syntax,comments {#787878}
syntax,cursor {#0089f0}
syntax,difference_add {#ebffeb}
syntax,difference_sub {#ffebeb}
syntax,embedded {#efefef}
syntax,foreground {#000000}
syntax,functions {white}
syntax,highlighter {#ce13cb}
syntax,keywords {#900000}
syntax,line_number {#c5c5c5}
syntax,linemap {#5d635f}
syntax,linemap_separator {#bebebe}
syntax,marker {orange}
syntax,meta {#cccccc}
syntax,miscellaneous1 {#0e2164}
syntax,miscellaneous2 {#3a3a3a}
syntax,miscellaneous3 {#002a65}
syntax,numbers {#005100}
syntax,precompile {#b801a3}
syntax,punctuation {#001d56}
syntax,readmeta {#5d5d5d}
syntax,search_background {#ffce00}
syntax,search_foreground {#0808d4}
syntax,select_background {#b1c2ab}
syntax,select_foreground {#000000}
syntax,strings {#800080}
syntax,variables {#134121}
syntax,warning_width {#cccccc}
tabs,-activebackground {#b4bab6}
tabs,-activeforeground {#550000}
tabs,-background {#989e9a}
tabs,-bordercolor {#000000}
tabs,-foreground {#000000}
tabs,-height {25}
tabs,-inactivebackground {#989e9a}
tabs,-inactiveforeground {#000000}
tabs,-relief {flat}
text_scrollbar,-altforeground {red}
text_scrollbar,-background {#f4f4f4}
text_scrollbar,-foreground {#cccccc}
text_scrollbar,-thickness {15}
ttk_style,active_color {#676f69}
ttk_style,background {#515753}
ttk_style,border_color {#9e9a91}
ttk_style,dark_color {#cfcdc8}
ttk_style,disabled_background {#3e483c}
ttk_style,disabled_foreground {#c3c3c3}
ttk_style,entry_border {#008000}
ttk_style,foreground {#f4f4f4}
ttk_style,grip_count {10}
ttk_style,grip_thickness {5}
ttk_style,pressed_color {#bab5ab}
ttk_style,relief {flat}
ttk_style,select_background {#515753}
ttk_style,select_foreground {#ffffff}
